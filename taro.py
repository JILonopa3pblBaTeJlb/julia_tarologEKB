import json
import os
import random
import logging
import time
from telegram import Update
from telegram.ext import CallbackContext
from gpt_handler import get_gpt_response
from emojification import emojify

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TARO_DATA_FILE = 'taro_data.json'
TARO_PROMPT_FILE = 'taro_prompt.txt'
COOLDOWN_PERIOD = 60  # Cooldown period in seconds

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
last_taro_request_time = None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¢–∞—Ä–æ
def load_taro_data():
    try:
        with open(TARO_DATA_FILE, 'r', encoding='utf-8') as file:
            taro_data = json.load(file)
            logging.info(f"Taro data loaded successfully: {taro_data}")
            return taro_data
    except Exception as e:
        logging.error(f"Error loading taro data: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¢–∞—Ä–æ
def load_taro_prompt():
    try:
        with open(TARO_PROMPT_FILE, 'r', encoding='utf-8') as file:
            prompt = file.read().strip()
            logging.info(f"Taro prompt loaded successfully: {prompt}")
            return prompt
    except Exception as e:
        logging.error(f"Error loading taro prompt: {e}")
        return "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¢–∞—Ä–æ:"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¢–∞—Ä–æ –∏ –ø—Ä–æ–º–ø—Ç–∞
TARO_CARDS = load_taro_data()
TARO_PROMPT = load_taro_prompt()

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–∏ÃÜ–Ω—ã—Ö –∫–∞—Ä—Ç –¢–∞—Ä–æ
def get_random_taro_cards(count=3):
    if count > len(TARO_CARDS):
        count = len(TARO_CARDS)  # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —á–∏—Å–ª–æ–º –∫–∞—Ä—Ç
    selected = random.sample(TARO_CARDS, count)
    print(f"Selected {count} cards: {selected}")
    return selected

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¢–∞—Ä–æ
def handle_taro(update: Update, context: CallbackContext):
    global last_taro_request_time

    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if last_taro_request_time and current_time - last_taro_request_time < COOLDOWN_PERIOD:
        update.message.reply_text('üíÖ')
        return

    last_taro_request_time = current_time

    try:
        count = int(context.args[0]) if context.args else 3
        if count < 1:
            count = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –º–µ–Ω—å—à–µ 1

        selected_cards = get_random_taro_cards(count)
        logging.info(f"Selected cards: {selected_cards}")
        original_response = "–¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥:\n\n" + "\n\n".join([f"{card['name']}: {card['meaning']}" for card in selected_cards])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–∏ÃÜ –ø—Ä–æ–º–ø—Ç –¥–ª—è g4f
        full_prompt = f"{TARO_PROMPT}\n\n{original_response}"
        g4f_response, provider = get_gpt_response(full_prompt, update, context)
        
        if g4f_response:
            emojified_response = emojify(g4f_response)
            update.message.reply_text(emojified_response)
        else:
            emojified_original_response = emojify(original_response)
            update.message.reply_text(emojified_original_response)
            
    except Exception as e:
        logging.error(f"Error in handle_taro: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ.")

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    class MockUpdate:
        class Message:
            from_user = type('obj', (object,), {'id': 123456})
            def reply_text(self, text):
                print(f"Replying with text: {text}")
        message = Message()

    class MockContext:
        args = []
        
    update = MockUpdate()
    context = MockContext()
    handle_taro(update, context)
